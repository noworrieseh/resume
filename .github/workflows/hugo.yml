# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
    # Runs on pushes targeting the default branch
    push:
        branches: ["main"]

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
    contents: read
    pages: write
    id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
    group: "pages"
    cancel-in-progress: false

# Default to bash
defaults:
    run:
        shell: bash

jobs:
    # Build job
    build:
        runs-on: ubuntu-22.04
        env:
            HUGO_VERSION: 0.147.9
            UV_VERSION: 0.8.5
            DARTSASS_VERSION: 1.89.2
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  submodules: recursive

            - name: Setup Python
              uses: actions/setup-python@v5
              with:
                  python-version-file: ".python-version"

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                  version: ${{ env.UV_VERSION }}
                  enable-cache: true

            - name: Setup Hugo
              uses: peaceiris/actions-hugo@v3
              with:
                  hugo-version: ${{ env.HUGO_VERSION }}
                  extended: true

            - name: Install Dart Sass
              uses: dw-labs-org/dart-sass-gha@v1
              with:
                  version: ${{ env.DARTSASS_VERSION }}

            - name: Setup Pages
              id: pages
              uses: actions/configure-pages@v5

            - name: Build with Hugo
              env:
                  HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
                  HUGO_ENVIRONMENT: production
              run: |
                  echo "BaseURL: ${{ steps.pages.outputs.base_url }}"
                  hugo --cleanDestinationDir --baseURL "${{ steps.pages.outputs.base_url }}/"

            #- name: Cache playwright binaries
            #  uses: actions/cache@v4
            #  id: playwright-cache
            #  with:
            #      path: ~/.cache/ms-playwright
            #      key: ${{ runner.os }}-playwright-${{ hashFiles('**/uv.lock') }}

            #- name: Cache APT packages
            #  uses: awalsh128/cache-apt-pkgs-action@v1.5.1
            #  with:
            #      packages: libasound2 libatk-bridge2.0-0 libatk1.0-0 libatspi2.0-0 libcairo2 libcups2 libdbus-1-3 libdrm2 libgbm1 libglib2.0-0 libnspr4 libnss3 libpango-1.0-0 libwayland-client0 libx11-6 libxcb1 libxcomposite1 libxdamage1 libxext6 libxfixes3 libxkbcommon0 libxrandr2 ffmpeg libcairo-gobject2 libdbus-glib-1-2 libfontconfig1 libfreetype6 libgdk-pixbuf-2.0-0 libgtk-3-0 libpangocairo-1.0-0 libx11-xcb1 libxcb-shm0 libxcursor1 libxi6 libxrender1 libxtst6 libsoup-3.0-0 libenchant-2-2 #gstreamer1.0-libav gstreamer1.0-plugins-bad gstreamer1.0-plugins-base gstreamer1.0-plugins-good libicu70 libegl1 libepoxy0 libevdev2 libffi7 libgles2 libglx0 libgstreamer-gl1.0-0 libgstreamer-plugins-base1.0-0 libgstreamer1.0-0 libgtk-4-1 libgudev-1.0-0 libharfbuzz-icu0 libharfbuzz0b libhyphen0 libjpeg-turbo8 liblcms2-2 libmanette-0.2-0 libnotify4 libopengl0 libopenjp2-7 libopus0 libpng16-16 libproxy1v5 libsecret-1-0 libwayland-egl1 libwayland-server0 libwebpdemux2 libwoff1 libxml2 libxslt1.1 #libx264-163 libatomic1 libevent-2.1-7 libavif13 xvfb fonts-noto-color-emoji fonts-unifont xfonts-cyrillic xfonts-scalable fonts-liberation fonts-ipafont-gothic fonts-wqy-zenhei fonts-tlwg-loma-otf fonts-freefont-ttf
            #      version: 1.0

            #- name: Install Playwright browsers
            #  if: steps.playwright-cache.outputs.cache-hit != 'true'
            #  run: |
            #      uv run playwright install chromium

            #- name: Generate PDF
            #  run: |
            #      uv run cnvt.py public/index.html public/resume.pdf
            - name: Generate PDF
              uses: noworrieseh/hugo-pdf-action@v1
              with:
                  source: "public/index.html"
                  pdf: "public/resume.pdf"

            - name: Upload artifact
              uses: actions/upload-pages-artifact@v3
              with:
                  path: ./public

    # Deployment job
    deploy:
        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}
        runs-on: ubuntu-22.04
        needs: build
        steps:
            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v4
