# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
    # Runs on pushes targeting the default branch
    push:
        branches: ["main"]

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
    contents: read
    pages: write
    id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
    group: "pages"
    cancel-in-progress: false

# Default to bash
defaults:
    run:
        shell: bash

jobs:
    # Build job
    build:
        runs-on: ubuntu-latest
        env:
            HUGO_VERSION: 0.147.9
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  submodules: recursive

            - name: Setup Python
              uses: actions/setup-python@v5
              with:
                  python-version-file: ".python-version"
                  cache: "pip"

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                  enable-cache: true

            - name: Install Hugo CLI
              run: |
                  wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
                  && sudo dpkg -i ${{ runner.temp }}/hugo.deb

            - name: Install Dart Sass
              uses: dw-labs-org/dart-sass-gha@v1

            - name: Setup Pages
              id: pages
              uses: actions/configure-pages@v5

            - name: Build with Hugo
              env:
                  HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
                  HUGO_ENVIRONMENT: production
              run: |
                  hugo --cleanDestinationDir --baseURL "${{ steps.pages.outputs.base_url }}/"

            - name: Cache playwright binaries
              uses: actions/cache@v4
              id: playwright-cache
              with:
                  path: ~/.cache/ms-playwright
                  key: ${{ runner.os }}-playwright-${{ hashFiles('**/uv.lock') }}

            - name: Cache APT packages
              uses: actions/cache@v4
              id: apt-cache
              with:
                  path: /var/cache/apt/archives
                  key: ${{ runner.os }}-apt-${{ hashFiles('**/uv.lock') }}

            - name: Install Playwright browsers
              if: steps.playwright-cache.outputs.cache-hit != 'true' ||
                  steps.apt-cache.outputs.cache-hit != 'true'
              run: |
                  playwright install --with-deps chromium

            - name: Generate PDF
              run: |
                  uv run cnvt.py public/index.html public/resume.pdf

            - name: Upload artifact
              uses: actions/upload-pages-artifact@v3
              with:
                  path: ./public

    # Deployment job
    deploy:
        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v4
